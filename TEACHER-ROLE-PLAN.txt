Step 1: Custom Claim
Create Cloud Function to set the custom claim on the teacher's Auth account. This identifies them as a "teacher" in the system

JavaScript

// This claim simply confirms: "This user IS a teacher."
await admin.auth().setCustomUserClaims(userUid, { role: "teacher" });


Step 2: Modified Firestore Security Rule
Now, when a teacher tries to read a student document, the rule must:
Check if the user is a teacher (using the claim).
Get the classId from the studentClass record.
Fetch the corresponding document from the classes collection.
Check if the user's UID matches the teacherId on that class document.


JavaScript

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // You don't need to secure the 'classes' collection as much for reads,
    // as it likely just contains public metadata. Writes should be locked.
    match /classes/{classId} {
      allow read: if true; // Or 'if request.auth != null'
      allow write: if request.auth.token.role == 'teacher'; // Only teachers or functions should create classes
    }

    // This is the key rule for your student records
    match /users/{userId}/math_whiz_data/profile {
    
      allow read, write: if
          // Condition 1: Is the user a teacher?
          request.auth.token.role == 'teacher'
          
          && // AND
          
          // Condition 2: Does their UID match the teacherId on the 
          // class document that this student belongs to?
          request.auth.uid == get(
             /databases/$(database)/documents/classStudents/$(resource.data.classId)
          ).data.teacherId;

          && // AND

          // userId is the student being accessed
          userId == get(
            /databases/$(database)/documents/classStudents/$(resource.data.classId)
          ).data.studentId;
    }
  }
}
How This Rule Works:
When teacher with UID UID_T tries to read student with UID UID_S:

Firebase checks: request.auth.token.role == 'teacher'. This is true.
Firebase looks at the student document's data (resource.data) and finds its classId is UID_C.
The get() function fetches the document at /classStudents/UID_C.
It reads the data from that class: .data.teacherId, which is UID_T.
It compares that value to the requesting user's ID: UID_T == UID_T. This is true.
Since both conditions are true, access is GRANTED.
If with UID_Alice tried to read the same record, it would fail (UID_Alice == UID_T), and access would be DENIED.